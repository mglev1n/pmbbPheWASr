[{"path":"https://mglev1n.github.io/pmbbPheWASr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Michael Levin Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"filter-variant-annotations-file","dir":"Articles","previous_headings":"","what":"Filter Variant Annotations File","title":"Get started","text":"awk_str_filter function can used filter arbitrary rows tab-delimited text file using awk. function accepts path tab-delimited text file, name column filter, string filter . function returns tibble containing filtered rows. function can used filter PMBB variant annotations file include variants within specified gene(s).","code":"#' \\dontrun{ ldlr_variants <- awk_str_filter(   filename = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   filter_col = \"Gene.refGene\",   filter_str = c(\"LDLR\")) #' }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"apply-variant-masks-to-annotation-file","dir":"Articles","previous_headings":"","what":"Apply variant masks to annotation file","title":"Get started","text":"apply_variant_masks function applies variant mask criteria data frame containing variant annotations. function can accept multiple sets filter criteria, defined list column names filter conditions. resulting filtered data frames returned named list.","code":"#' \\dontrun{  # Extract variants in a gene ldlr_variants <- awk_str_filter(   filename = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   filter_col = \"Gene.refGene\",   filter_str = c(\"LDLR\"))  # Apply the specified masks to the set of variants apply_variant_masks(   ldlr_variants,   masks = list(     plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"),     common_0.01 = list(gnomAD_exome_ALL = \"> 0.01\"),     exonic_0.001 = list(Func.refGene = \"== 'exonic'\", gnomAD_exome_ALL = \"< 0.001\")   ) ) #' }"},{"path":[]},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"extract-a-single-set-of-variants","dir":"Articles","previous_headings":"Extracting genotypes","what":"Extract a single set of variants","title":"Get started","text":"pmbb_extract_genotypes function wrapper around plink2 extract genotypes PMBB plink files. function accepts path plink files list variant IDs extract. function returns long-format tibble containing extracted genotypes PMBB participant.","code":"#' \\dontrun{ pmbb_extract_genotypes(   variant_df = ldlr_variants,   variant_id_col = ID,   effect_allele_col = Alt,   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\" ) #' }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"extract-genotypes-based-on-masks","dir":"Articles","previous_headings":"Extracting genotypes","what":"Extract genotypes based on masks","title":"Get started","text":"pmbb_extract_genotype_masks function extracts genotypes subset participants based set masks. function wraps awk_str_filter, apply_variant_masks, pmbb_extract_genotypes extract genotypes PMBB participants based set masks.","code":"#' \\dontrun{ ldlr_mask_res <- pmbb_extract_genotype_masks(   gene = \"LDLR\",   annotation_file = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   gene_col = \"Gene.refGene\",   masks = list(     plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"),     rare_0.000001 = list(gnomAD_exome_ALL = \"< 0.000001\")   ),   mask_operator = list(     plof_0.001 = \"burden\",     rare_0.000001 = \"single\"   ),   variant_id_col = ID,   effect_allele_col = Alt,   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\") #' }"},{"path":[]},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"format-pmbb-phecode-data","dir":"Articles","previous_headings":"PheWAS convenience functions","what":"Format PMBB phecode data","title":"Get started","text":"pmbb_format_phecodes function takes path PMBB phecode file applies case threshold categorize individuals cases controls. function returns tibble PMBB_ID phecodes columns, TRUE/FALSE values phecode column.","code":"#' \\dontrun{ pmbb_format_phecodes(phecode_file = \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_phenotype_PheCode-matrix.txt\") #' }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"run-a-phewas","dir":"Articles","previous_headings":"PheWAS convenience functions","what":"Run a PheWAS","title":"Get started","text":"run_pmbb_phewas function runs PheWAS PMBB data, using results pmbb_extract_genotype_masks function paths PMBB files containing phenotype covariate data.","code":"#' \\dontrun{ # Extract genotypes for a series of masks ldlr_mask_res <- pmbb_extract_genotype_masks(   gene = \"LDLR\",   annotation_file = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   gene_col = \"Gene.refGene\",   masks = list(     plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"),     common = list(gnomAD_exome_ALL = \"> 0.01\")   ),   mask_operator = list(     plof_0.001 = \"burden\",     common = \"single\"   ),   variant_id_col = ID,   effect_allele_col = Alt,   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\")  # Run a PheWAS phewas_res <- run_pmbb_phewas(   mask_genotypes_list = ldlr_mask_res,   phecode_file = \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_phenotype_PheCode-matrix.txt\",   covariate_files = c(\"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_covariates.txt\", \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.1/PMBB-Release-2020-2.1_phenotype_covariates.txt\"),   populations = c(\"ALL\", \"EUR\"),   covariate_population_col = Class,   covariate_cols = c(Age = Age_at_Enrollment, Sex = Gen_Sex, dplyr::starts_with(\"Genotype_PC\")) ) #' }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"run-a-phewas-and-generate-a-report","dir":"Articles","previous_headings":"PheWAS convenience functions","what":"Run a PheWAS and generate a report","title":"Get started","text":"run_pmbb_phewas_report function wrapper around run_pmbb_phewas function generates HTML report results.","code":"#' \\dontrun{ run_pmbb_phewas_report(   gene = c(\"LDLR\"),   annotation_file = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   gene_col = \"Gene.refGene\",   masks = list(     plof_0.01 = list(ExonicFunc.ensGene = \"%in% c('stopgain', 'stoploss', 'frameshift substitution')\", gnomAD_exome_ALL = \"< 0.01\"),     missense_0.01 = list(ExonicFunc.ensGene = \"%in% c('nonsynonymous SNV')\", gnomAD_exome_ALL = \"< 0.01\")   ),   mask_operator = list(     plof_0.01 = \"burden\",     missense_0.01 = \"burden\"   ),   variant_id_col = ID,   effect_allele_col = Alt,   populations = c(\"ALL\"),   covariate_population_col = \"Class\",   covariate_cols = c(Age = Age_at_Enrollment, Sex = Gen_Sex, dplyr::starts_with(\"Genotype_PC\")),   mask_output_path = \"LDLR_mask_results.rds\",  # Optional: Specify the output path for the mask results file   phewas_output_path = \"LDLR_phewas_results.rds\",  # Optional: Specify the output path for the PheWAS results file,   phecode_file = \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_phenotype_PheCode-matrix.txt\",   covariate_files = c(\"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_covariates.txt\", \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.1/PMBB-Release-2020-2.1_phenotype_covariates.txt\"),   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\",   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   cores = 16 ) #' }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/articles/get-started.html","id":"render-a-report-from-pre-saved-phewas-output","dir":"Articles","previous_headings":"PheWAS convenience functions","what":"Render a report from pre-saved pheWAS output","title":"Get started","text":"","code":"#' \\dontrun{ render_pmbb_phewas_report() #' }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Levin. Author, maintainer.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Levin M (2024). pmbbPheWASr: Penn Medicine Biobank Phenome-wide Association Studies. R package version 0.3.0, https://github.com/mglev1n/pmbbPheWASr.","code":"@Manual{,   title = {pmbbPheWASr: Penn Medicine Biobank Phenome-wide Association Studies},   author = {Michael Levin},   year = {2024},   note = {R package version 0.3.0},   url = {https://github.com/mglev1n/pmbbPheWASr}, }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/index.html","id":"pmbbphewasr","dir":"","previous_headings":"","what":"Penn Medicine Biobank Phenome-wide Association Studies","title":"Penn Medicine Biobank Phenome-wide Association Studies","text":"goal pmbbPheWASr enable Penn Medicine Biobank researchers perform phenome-wide association studies (PheWAS) using Penn Medicine Biobank data. package provides set tools perform PheWAS analyses, including data cleaning, harmonization, analysis.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Penn Medicine Biobank Phenome-wide Association Studies","text":"can install development version pmbbPheWASr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"mglev1n/pmbbPheWASr\")"},{"path":"https://mglev1n.github.io/pmbbPheWASr/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Penn Medicine Biobank Phenome-wide Association Studies","text":"Full documentation website : https://mglev1n.github.io/pmbbPheWASr","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/apply_variant_masks.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply variant masks to annotation file — apply_variant_masks","title":"Apply variant masks to annotation file — apply_variant_masks","text":"function applies variant mask criteria data frame containing variant annotations. function can accept multiple sets filter criteria, defined list column names filter conditions. resulting filtered data frames returned named list.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/apply_variant_masks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply variant masks to annotation file — apply_variant_masks","text":"","code":"apply_variant_masks(annotation_df, masks)"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/apply_variant_masks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply variant masks to annotation file — apply_variant_masks","text":"annotation_df data frame filtered. masks named list lists containing filter criteria. element outer list named desired output name filtered data frame (eg. name variant mask). inner list contain filter criteria specific set columns. example: list(plof_0.001 = list(ExonicFunc.ensGene = \"= stopgain\", gnomAD_exome_ALL = \"< 0.001\"), common_0.01 = list(gnomAD_exome_ALL = \"> 0.01\"))","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/apply_variant_masks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply variant masks to annotation file — apply_variant_masks","text":"named list filtered tibble::tibble()s based provided filter criteria.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/apply_variant_masks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply variant masks to annotation file — apply_variant_masks","text":"","code":"if (FALSE) {  # Extract variants in a gene ldlr_variants <- awk_str_filter(   filename = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   filter_col = \"Gene.refGene\",   filter_str = c(\"LDLR\"))  # Apply the specified masks to the set of variants apply_variant_masks(   ldlr_variants,   masks = list(     plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"),     common_0.01 = list(gnomAD_exome_ALL = \"> 0.01\"),     exonic_0.001 = list(Func.refGene = \"== 'exonic'\", gnomAD_exome_ALL = \"< 0.001\")   ) ) }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/awk_str_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter arbitrary rows from a tab-delimited text file using awk — awk_str_filter","title":"Filter arbitrary rows from a tab-delimited text file using awk — awk_str_filter","text":"function wraps system command awk efficiently filter rows tab-delimited text file. function accepts path tab-delimited text file, name column filter, string filter . function returns tibble containing filtered rows.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/awk_str_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter arbitrary rows from a tab-delimited text file using awk — awk_str_filter","text":"","code":"awk_str_filter(filename, filter_col, filter_str)"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/awk_str_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter arbitrary rows from a tab-delimited text file using awk — awk_str_filter","text":"filename path tab-delimited text file. filter_col name column filter. filter_str character vector strings filter specified column.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/awk_str_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter arbitrary rows from a tab-delimited text file using awk — awk_str_filter","text":"tibble::tibble() containing filtered rows input file","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/awk_str_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter arbitrary rows from a tab-delimited text file using awk — awk_str_filter","text":"","code":"if (FALSE) { ldlr_variants <- awk_str_filter(   filename = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   filter_col = \"Gene.refGene\",   filter_str = c(\"LDLR\")) }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbbPheWASr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"pmbbPheWASr: Penn Medicine Biobank Phenome-wide Association Studies — pmbbPheWASr-package","title":"pmbbPheWASr: Penn Medicine Biobank Phenome-wide Association Studies — pmbbPheWASr-package","text":"Set tools perform phenome-wide association studies using Penn Medicine Biobank data.","code":""},{"path":[]},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbbPheWASr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"pmbbPheWASr: Penn Medicine Biobank Phenome-wide Association Studies — pmbbPheWASr-package","text":"Maintainer: Michael Levin michael.levin@pennmedicine.upenn.edu (ORCID)","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotype_masks.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract genotypes based on variant masks — pmbb_extract_genotype_masks","title":"Extract genotypes based on variant masks — pmbb_extract_genotype_masks","text":"function extracts genotypes subset participants based set masks. wraps awk_str_filter, apply_variant_masks, pmbb_extract_genotypes extract genotypes PMBB participants based set masks.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotype_masks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract genotypes based on variant masks — pmbb_extract_genotype_masks","text":"","code":"pmbb_extract_genotype_masks(   gene,   annotation_file,   gene_col,   masks,   variant_id_col,   effect_allele_col,   mask_operator = NULL,   plink_bin,   bfile,   threads = 1,   memory = 8000 )"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotype_masks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract genotypes based on variant masks — pmbb_extract_genotype_masks","text":"gene name gene filter variants . annotation_file path variant annotation file. gene_col name column annotation file filter gene . masks named list lists containing filter criteria mask. element outer list named desired output name filtered data frame (eg. name variant mask). inner list contain filter criteria specific set columns. example: list(plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"), common_0.01 = list(gnomAD_exome_ALL = \"> 0.01\")) variant_id_col name column annotation file contains variant IDs. effect_allele_col name column annotation file contains effect alleles. mask_operator named list specifying operation perform mask. Valid operations \"burden\" (default) \"single\". names mask_operator list correspond names masks list. example: list(plof_0.001 = \"burden\", common_0.01 = \"single\") plink_bin path plink2 binary executable. bfile prefix plink binary files (without file extension). threads number threads use parallel processing (default: 1). memory amount memory (MB) allocate plink2 (default: 8000).","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotype_masks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract genotypes based on variant masks — pmbb_extract_genotype_masks","text":"named list, element represents mask contains list components based specified mask_operator: - \"variants\": tibble::tibble() variants included mask. - \"genotypes\": tibble::tibble() containing genotype PMBB participant. - \"mask\": string containing mask applied filter variants. - \"mask_type\": tibble::tibble() containing mask type applied (eg. \"burden\" \"single\").","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotype_masks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract genotypes based on variant masks — pmbb_extract_genotype_masks","text":"","code":"if (FALSE) { ldlr_mask_res <- pmbb_extract_genotype_masks(   gene = \"LDLR\",   annotation_file = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   gene_col = \"Gene.refGene\",   masks = list(     plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"),     rare_0.000001 = list(gnomAD_exome_ALL = \"< 0.000001\")   ),   mask_operator = list(     plof_0.001 = \"burden\",     rare_0.000001 = \"single\"   ),   variant_id_col = ID,   effect_allele_col = Alt,   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\") }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotypes.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract genotypes from PMBB plink files — pmbb_extract_genotypes","title":"Extract genotypes from PMBB plink files — pmbb_extract_genotypes","text":"function wrapper around plink2 extract genotypes PMBB plink files. function accepts path plink files list variant IDs extract. function returns long-format tibble::tibble() containing extracted genotypes PMBB participant.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotypes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract genotypes from PMBB plink files — pmbb_extract_genotypes","text":"","code":"pmbb_extract_genotypes(   variant_df,   variant_id_col,   effect_allele_col,   plink_bin,   bfile,   threads = 1,   memory = 8000 )"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotypes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract genotypes from PMBB plink files — pmbb_extract_genotypes","text":"variant_df data frame containing variant information. variant_id_col name column variant_df contains variant IDs. effect_allele_col name column variant_df contains effect alleles. plink_bin path plink2 binary executable. bfile prefix plink binary files (without file extension). threads number threads use parallel processing (default: 1). memory amount memory (MB) allocate plink2 (default: 8000).","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotypes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract genotypes from PMBB plink files — pmbb_extract_genotypes","text":"long-format tibble::tibble() containing extracted genotypes PMBB participant.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_extract_genotypes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract genotypes from PMBB plink files — pmbb_extract_genotypes","text":"","code":"if (FALSE) { pmbb_extract_genotypes(   variant_df = ldlr_variants,   variant_id_col = ID,   effect_allele_col = Alt,   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\" ) }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_format_phecodes.html","id":null,"dir":"Reference","previous_headings":"","what":"Format PMBB phecode data — pmbb_format_phecodes","title":"Format PMBB phecode data — pmbb_format_phecodes","text":"Given dataframe containing PMBB phecodes, apply case treshold categorizing individuals cases controls","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_format_phecodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format PMBB phecode data — pmbb_format_phecodes","text":"","code":"pmbb_format_phecodes(phecode_file, phecode_case_threshold = 2)"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_format_phecodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format PMBB phecode data — pmbb_format_phecodes","text":"phecode_file Path PMBB phecode file used run PheWAS phecode_case_threshold Number cases required classify individual case","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_format_phecodes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Format PMBB phecode data — pmbb_format_phecodes","text":"tibble::tibble() containing PMBB_ID phecodes columns, TRUE/FALSE values phecode column","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/pmbb_format_phecodes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Format PMBB phecode data — pmbb_format_phecodes","text":"","code":"if (FALSE) { pmbb_format_phecodes(phecode_file = \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_phenotype_PheCode-matrix.txt\") }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/render_pmbb_phewas_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Render PheWAS Report — render_pmbb_phewas_report","title":"Render PheWAS Report — render_pmbb_phewas_report","text":"function renders HTML report pre-saved genotype mask PheWAS output files.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/render_pmbb_phewas_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render PheWAS Report — render_pmbb_phewas_report","text":"","code":"render_pmbb_phewas_report(   mask_output_path,   phewas_output_path,   output_file,   template_path = NULL,   ... )"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/render_pmbb_phewas_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render PheWAS Report — render_pmbb_phewas_report","text":"mask_output_path Path saved genotype output mask phewas_output_path Path saved PheWAS output dataframe output_file Full path save HTML report template_path Optional path custom Quarto template file. provided, default template used. template Quarto document necessary code render PheWAS report, must located top directory current project. example template can generated using: usethis::use_template(\".phecode_phewas_template.qmd\", save_as = \"phecode_phewas_template.qmd\", package = \"pmbbPheWASr\"), saved current working directory. ... Additional named parameters pass Quarto document","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/render_pmbb_phewas_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render PheWAS Report — render_pmbb_phewas_report","text":"function renders HTML report returns silently","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/render_pmbb_phewas_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Render PheWAS Report — render_pmbb_phewas_report","text":"","code":"if (FALSE) { render_pmbb_phewas_report() }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a PheWAS on PMBB data — run_pmbb_phewas","title":"Run a PheWAS on PMBB data — run_pmbb_phewas","text":"function runs PheWAS PMBB data, using genotype information paths PMBB files containing phenotype covariate data. function ideally accepts genotype information pmbb_extract_genotype_masks function, can accept genotype information format list(mask_name = list(genotypes = data.frame(PMBB_ID = character(), genotype = character())))","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a PheWAS on PMBB data — run_pmbb_phewas","text":"","code":"run_pmbb_phewas(   mask_genotypes_list,   phecode_file,   covariate_files,   populations = c(\"ALL\"),   covariate_cols,   covariate_population_col = NULL,   phenotype_case_count = 2,   ... )"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a PheWAS on PMBB data — run_pmbb_phewas","text":"mask_genotypes_list named list, element contains named element called genotypes contains PMBB_ID genotype columns. phecode_file Path PMBB phenotype file dataframe containing phenotype data used run PheWAS covariate_files Path PMBB covariate file(s) dataframe containing covariate data used run PheWAS. multiple files provided, joined PMBB_ID, values duplicated columns preserved file specified earlier. populations character vector populations run PheWAS . Default c(\"\") covariate_cols Vector columns covariate file dataframe used covariates PheWAS covariate_population_col Column containing population labels covariate file dataframe, required populations phenotype_case_count minimum number codes required considered case (Default: 2) ... Additional arguments passed PheWAS::phewas()","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a PheWAS on PMBB data — run_pmbb_phewas","text":"tibble::tibble() containing results PheWAS population mask","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a PheWAS on PMBB data — run_pmbb_phewas","text":"","code":"if (FALSE) { # Extract genotypes for a series of masks ldlr_mask_res <- pmbb_extract_genotype_masks(   gene = \"LDLR\",   annotation_file = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   gene_col = \"Gene.refGene\",   masks = list(     plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"),     common = list(gnomAD_exome_ALL = \"> 0.01\")   ),   mask_operator = list(     plof_0.001 = \"burden\",     common = \"single\"   ),   variant_id_col = ID,   effect_allele_col = Alt,   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\")  # Run a PheWAS phewas_res <- run_pmbb_phewas(   mask_genotypes_list = ldlr_mask_res,   phecode_file = \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_phenotype_PheCode-matrix.txt\",   covariate_files = c(\"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_covariates.txt\", \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.1/PMBB-Release-2020-2.1_phenotype_covariates.txt\"),   populations = c(\"ALL\", \"EUR\"),   covariate_population_col = Class,   covariate_cols = c(Age = Age_at_Enrollment, Sex = Gen_Sex, dplyr::starts_with(\"Genotype_PC\")) ) }"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas_report.html","id":null,"dir":"Reference","previous_headings":"","what":"Run a PheWAS and generate a report — run_pmbb_phewas_report","title":"Run a PheWAS and generate a report — run_pmbb_phewas_report","text":"function wrapper around run_pmbb_phewas function additionally generates HTML report results.","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas_report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run a PheWAS and generate a report — run_pmbb_phewas_report","text":"","code":"run_pmbb_phewas_report(   gene,   annotation_file,   gene_col,   masks,   mask_operator,   variant_id_col,   effect_allele_col,   plink_bin,   bfile,   phecode_file,   covariate_files,   populations,   covariate_population_col,   covariate_cols,   mask_output_path = NULL,   phewas_output_path = NULL,   report_output_path = NULL,   ... )"},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas_report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run a PheWAS and generate a report — run_pmbb_phewas_report","text":"gene name gene filter variants . annotation_file path variant annotation file. gene_col name column annotation file filter gene . masks named list lists containing filter criteria mask. element outer list named desired output name filtered data frame (eg. name variant mask). inner list contain filter criteria specific set columns. example: list(plof_0.001 = list(ExonicFunc.ensGene = \"== 'stopgain'\", gnomAD_exome_ALL = \"< 0.001\"), common_0.01 = list(gnomAD_exome_ALL = \"> 0.01\")) mask_operator named list specifying operation perform mask. Valid operations \"burden\" (default) \"single\". names mask_operator list correspond names masks list. example: list(plof_0.001 = \"burden\", common_0.01 = \"single\") variant_id_col name column annotation file contains variant IDs. effect_allele_col name column annotation file contains effect alleles. plink_bin path plink2 binary executable. bfile prefix plink binary files (without file extension). phecode_file Path PMBB phenotype file dataframe containing phenotype data used run PheWAS covariate_files Path PMBB covariate file(s) dataframe containing covariate data used run PheWAS. multiple files provided, joined PMBB_ID, values duplicated columns preserved file specified earlier. populations character vector populations run PheWAS . Default c(\"\") covariate_population_col Column containing population labels covariate file dataframe, required populations covariate_cols Vector columns covariate file dataframe used covariates PheWAS mask_output_path Path saved genotype output mask phewas_output_path Path saved PheWAS output dataframe report_output_path (Optional) File name path report saved. provided report saved current directory ... Additional arguments passed PheWAS::phewas()","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas_report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run a PheWAS and generate a report — run_pmbb_phewas_report","text":"named list containing paths output files","code":""},{"path":"https://mglev1n.github.io/pmbbPheWASr/reference/run_pmbb_phewas_report.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Run a PheWAS and generate a report — run_pmbb_phewas_report","text":"","code":"if (FALSE) { run_pmbb_phewas_report(   gene = c(\"LDLR\"),   annotation_file = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/Variant_annotations/PMBB-Release-2020-2.0_genetic_exome_variant-annotation-counts.txt\",   gene_col = \"Gene.refGene\",   masks = list(     plof_0.01 = list(ExonicFunc.ensGene = \"%in% c('stopgain', 'stoploss', 'frameshift substitution')\", gnomAD_exome_ALL = \"< 0.01\"),     missense_0.01 = list(ExonicFunc.ensGene = \"%in% c('nonsynonymous SNV')\", gnomAD_exome_ALL = \"< 0.01\")   ),   mask_operator = list(     plof_0.01 = \"burden\",     missense_0.01 = \"burden\"   ),   variant_id_col = ID,   effect_allele_col = Alt,   populations = c(\"ALL\"),   covariate_population_col = \"Class\",   covariate_cols = c(Age = Age_at_Enrollment, Sex = Gen_Sex, dplyr::starts_with(\"Genotype_PC\")),   mask_output_path = \"LDLR_mask_results.rds\",  # Optional: Specify the output path for the mask results file   phewas_output_path = \"LDLR_phewas_results.rds\",  # Optional: Specify the output path for the PheWAS results file,   phecode_file = \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_phenotype_PheCode-matrix.txt\",   covariate_files = c(\"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.3/PMBB-Release-2020-2.3_covariates.txt\", \"/project/PMBB/PMBB-Release-2020-2.0/Phenotype/2.1/PMBB-Release-2020-2.1_phenotype_covariates.txt\"),   bfile = \"/project/PMBB/PMBB-Release-2020-2.0/Exome/pVCF/all_variants/PMBB-Release-2020-2.0_genetic_exome_GL\",   plink_bin = \"/project/voltron/Applications/PLINK/plink2_linux_avx2_20230607/plink2\",   cores = 16 ) }"}]
